generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  totp_key   Bytes?
  last_login DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  admin      Admin?
  site_user  SiteUser?
  user       User?
}

model User {
  id                   String        @id @default(uuid())
  created_at           DateTime      @default(now())
  updated_at           DateTime      @updatedAt
  username             String        @unique @db.VarChar(20)
  auth_id              String        @unique
  default_chat_room_id String?       @unique
  default_chat_room    ChatRoom?     @relation(fields: [default_chat_room_id], references: [id])
  ChatMember           ChatMember[]
  form_attempt         FormAttempt[]
  Session              Session[]
  SiteUser             SiteUser[]
  auth                 Auth          @relation(fields: [auth_id], references: [id])
}

model SiteUser {
  id            String       @id @default(uuid())
  profile_url   String?
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  auth_id       String       @unique
  api_key       String       @unique
  link          String       @unique
  registered_at DateTime?
  user_id       String
  website_name  String
  username      String
  Blog          Blog[]
  Category      Category[]
  Portfolio     Portfolio[]
  Session       Session[]
  SiteMetric    SiteMetric[]
  Auth          Auth         @relation(fields: [auth_id], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Admin {
  id          String       @id @default(uuid())
  username    String       @unique @db.VarChar(20)
  created_at  DateTime     @default(now())
  profile_url String?
  role_id     Int
  updated_at  DateTime     @updatedAt
  auth_id     String       @unique
  Auth        Auth         @relation(fields: [auth_id], references: [id])
  role        Role         @relation(fields: [role_id], references: [id])
  Blog        Blog[]
  Category    Category[]
  ChatMember  ChatMember[]
  Portfolio   Portfolio[]
  sessions    Session[]
}

model Session {
  id                  String    @id
  two_factor_verified Boolean   @default(false)
  admin_id            String?
  expires_at          DateTime
  user_id             String?
  site_user_id        String?
  admin               Admin?    @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  site_user           SiteUser? @relation(fields: [site_user_id], references: [id], onDelete: Cascade)
  user                User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  admins      Admin[]
  permissions PermissionFlag[]
}

model Resource {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  permissions PermissionFlag[]
}

model PermissionFlag {
  id          Int      @id @default(autoincrement())
  role_id     Int
  resource_id Int
  read        Boolean  @default(false)
  write       Boolean  @default(false)
  delete      Boolean  @default(false)
  resource    Resource @relation(fields: [resource_id], references: [id])
  role        Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, resource_id])
}

model Category {
  id                 String               @id @default(uuid())
  name               String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  color              CategoryColor        @default(BLUE)
  admin_id           String?
  site_user_id       String?
  admin              Admin?               @relation(fields: [admin_id], references: [id])
  site_user          SiteUser?            @relation(fields: [site_user_id], references: [id])
  CategoryOnBlog     CategoryOnBlog[]
  CategoryOnPorfolio CategoryOnPorfolio[]
}

model CategoryOnPorfolio {
  portfolio_id String
  category_id  String
  assignedBy   String
  category     Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  portfolio    Portfolio @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)

  @@id([portfolio_id, category_id])
}

model CategoryOnBlog {
  blog_id     String
  category_id String
  assignedBy  String
  blog        Blog     @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([blog_id, category_id])
}

model Portfolio {
  id                 String               @id @default(uuid())
  admin_id           String?
  title              String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  published_at       DateTime?
  slug               String               @unique
  gallery            String[]
  content            Json?
  cover_url          String?
  description        String
  site_user_id       String?
  github_link        String?
  preview_link       String?
  CategoryOnPorfolio CategoryOnPorfolio[]
  admin              Admin?               @relation(fields: [admin_id], references: [id])
  site_user          SiteUser?            @relation(fields: [site_user_id], references: [id])
  PortfolioMetric    PortfolioMetric[]
}

model Blog {
  id             String           @id @default(uuid())
  admin_id       String?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  published_at   DateTime?
  slug           String
  content        Json?
  cover_url      String?
  description    String
  site_user_id   String?
  title          String
  admin          Admin?           @relation(fields: [admin_id], references: [id])
  site_user      SiteUser?        @relation(fields: [site_user_id], references: [id])
  BlogMetric     BlogMetric[]
  CategoryOnBlog CategoryOnBlog[]
}

model FormQuestion {
  id            String         @id @default(uuid())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  published_at  DateTime?
  form_text     String
  type          QuestionType   @default(SINGLE_CHOICE)
  order         Int            @unique
  form_option   FormOption[]
  form_response FormResponse[]
}

model FormOption {
  id            String         @id @default(uuid())
  question_id   String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  option_text   String
  type          QuestionType   @default(SINGLE_CHOICE)
  price         Float[]
  metadata      Json?
  form_question FormQuestion   @relation(fields: [question_id], references: [id], onDelete: Cascade)
  form_response FormResponse[]
}

model FormResponse {
  id            String       @id @default(uuid())
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  question_id   String
  option_id     String
  metadata      Json?
  attempt_id    String
  form_attempt  FormAttempt  @relation(fields: [attempt_id], references: [id], onDelete: Cascade)
  form_option   FormOption   @relation(fields: [option_id], references: [id], onDelete: Cascade)
  form_question FormQuestion @relation(fields: [question_id], references: [id], onDelete: Cascade)
}

model FormAttempt {
  id            String         @id @default(uuid())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  quoted_price  Float[]
  user_id       String
  is_requested  Boolean        @default(false)
  user          User           @relation(fields: [user_id], references: [id])
  form_response FormResponse[]
}

model ChatRoom {
  id              String          @id @default(uuid())
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  name            String
  is_group        Boolean
  last_message_id String?         @unique
  chat_members    ChatMember[]
  chat_messages   ChatMessage[]
  last_message    ChatMessage?    @relation("LastMessageInChatRoom", fields: [last_message_id], references: [id])
  unread_messages UnreadMessage[]
  user            User?
}

model ChatMember {
  id              String          @id @default(uuid())
  admin_id        String?
  user_id         String?
  role            ChatMemberRole  @default(MEMBER)
  joined_at       DateTime        @default(now())
  chat_room_id    String
  left_at         DateTime?
  admin           Admin?          @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  chat_room       ChatRoom        @relation(fields: [chat_room_id], references: [id], onDelete: Cascade)
  user            User?           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chat_messages   ChatMessage[]
  unread_messages UnreadMessage[]
}

model ChatMessage {
  id                String          @id @default(uuid())
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  deleted_at        DateTime?
  content           String
  message_type      ChatMessageType @default(TEXT)
  chat_member_id    String
  chat_room_id      String
  media             String[]
  metadata          Json?
  chat_member       ChatMember      @relation(fields: [chat_member_id], references: [id])
  chat_room         ChatRoom        @relation(fields: [chat_room_id], references: [id], onDelete: Cascade)
  chat_room_message ChatRoom?       @relation("LastMessageInChatRoom")
}

model UnreadMessage {
  id             String     @id @default(uuid())
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  chat_room_id   String
  chat_member_id String
  total_count    Int
  chat_member    ChatMember @relation(fields: [chat_member_id], references: [id])
  chat_room      ChatRoom   @relation(fields: [chat_room_id], references: [id], onDelete: Cascade)
}

model BlogMetric {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  blog_id    String
  view       Int
  blog       Blog     @relation(fields: [blog_id], references: [id])
}

model PortfolioMetric {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  portfolio_id String
  view         Int       @default(1)
  portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])
}

model SiteMetric {
  id           String   @id @default(uuid())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  site_user_id String
  view         Int      @default(1)
  site_user    SiteUser @relation(fields: [site_user_id], references: [id])
}

model Test {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum CategoryColor {
  RED
  VIOLET
  GREEN
  PURPLE
  YELLOW
  ORANGE
  GRAY
  TEAL
  INDIGO
  BLUE
}

enum QuestionType {
  MULTI_CHOICE
  SINGLE_CHOICE
}

enum ChatMemberRole {
  ADMIN
  MEMBER
}

enum ChatMessageType {
  TEXT
  IMAGE
  JOIN
  LEAVE
  INVITE
  REMOVE
  FORM_ATTEMPT
}
