generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model Admin {
  id          String      @id @default(uuid())
  role_id     Int
  email       String      @unique
  password    String
  username    String      @unique @db.VarChar(20)
  profile_url String? // Optional URL for profile picture
  totp_key    Bytes?
  last_login  DateTime? // Last login timestamp
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  sessions    Session[]
  role        Role        @relation(references: [id], fields: [role_id])
  Portfolio   Portfolio[]
}

model Session {
  id                  String   @id
  admin_id            String
  expires_at          DateTime
  two_factor_verified Boolean  @default(false)

  admin Admin @relation(references: [id], fields: [admin_id], onDelete: Cascade)
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  permissions PermissionFlag[]
  admins      Admin[]
}

model Resource {
  id   Int    @id @default(autoincrement())
  name String @unique

  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  permissions PermissionFlag[]
}

model PermissionFlag {
  id          Int       @id @default(autoincrement())
  role_id     Int
  resource_id Int
  read        Boolean   @default(false)
  write       Boolean   @default(false)
  delete      Boolean   @default(false)
  role        Role?     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  resource    Resource? @relation(fields: [resource_id], references: [id])

  @@unique([role_id, resource_id])
}

model Category {
  id                 String               @id @default(uuid())
  name               String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  color              CategoryColor        @default(BLUE)
  CategoryOnPorfolio CategoryOnPorfolio[]
}

model CategoryOnPorfolio {
  portfolio_id String
  category_id  String
  assignedBy   String

  portfolio Portfolio @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)
  category  Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([portfolio_id, category_id])
}

model Portfolio {
  id                 String               @id @default(uuid())
  admin_id           String
  title              String
  description        String
  cover_url          String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  published_at       DateTime?
  slug               String
  gallery            String[]
  content            Json?
  admin              Admin                @relation(fields: [admin_id], references: [id])
  CategoryOnPorfolio CategoryOnPorfolio[]
}

enum CategoryColor {
  RED
  VIOLET
  GREEN
  PURPLE
  YELLOW
  ORANGE
  GRAY
  TEAL
  INDIGO
  BLUE
}
