generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  totp_key   Bytes?
  last_login DateTime? // Last login timestamp
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       User?
  siteUser   SiteUser?
  admin      Admin?
}

model User {
  id           String        @id @default(uuid())
  auth_id      String        @unique
  username     String        @unique @db.VarChar(20)
  profile_url  String? // Optional URL for profile picture
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  form_attempt FormAttempt[]
  ChatMember   ChatMember[]
  Session      Session[]
  auth         Auth          @relation(fields: [auth_id], references: [id])
}

model SiteUser {
  id          String      @id @default(uuid())
  auth_id     String      @unique
  username    String      @unique @db.VarChar(20)
  profile_url String? // Optional URL for profile picture
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  Portfolio   Portfolio[]
  Category    Category[]
  Blog        Blog[]
  Auth        Auth        @relation(fields: [auth_id], references: [id])
  Session     Session[]
}

model Admin {
  id          String       @id @default(uuid())
  role_id     Int
  auth_id     String       @unique
  username    String       @unique @db.VarChar(20)
  profile_url String? // Optional URL for profile picture
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  sessions    Session[]
  role        Role         @relation(references: [id], fields: [role_id])
  Portfolio   Portfolio[]
  Blog        Blog[]
  ChatMember  ChatMember[]
  Category    Category[]
  Auth        Auth         @relation(references: [id], fields: [auth_id])
}

model Session {
  id                  String    @id
  admin_id            String?
  user_id             String?
  site_user_id        String?
  expires_at          DateTime
  two_factor_verified Boolean   @default(false)
  admin               Admin?    @relation(references: [id], fields: [admin_id], onDelete: Cascade)
  user                User?     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  site_user           SiteUser? @relation(references: [id], fields: [site_user_id], onDelete: Cascade)
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  permissions PermissionFlag[]
  admins      Admin[]
}

model Resource {
  id   Int    @id @default(autoincrement())
  name String @unique

  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  permissions PermissionFlag[]
}

model PermissionFlag {
  id          Int       @id @default(autoincrement())
  role_id     Int
  resource_id Int
  read        Boolean   @default(false)
  write       Boolean   @default(false)
  delete      Boolean   @default(false)
  role        Role?     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  resource    Resource? @relation(fields: [resource_id], references: [id])

  @@unique([role_id, resource_id])
}

model Category {
  id                 String               @id @default(uuid())
  name               String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  color              CategoryColor        @default(BLUE)
  admin_id           String?
  site_user_id       String?
  admin              Admin?               @relation(fields: [admin_id], references: [id])
  site_user          SiteUser?            @relation(fields: [site_user_id], references: [id])
  CategoryOnPorfolio CategoryOnPorfolio[]
  CategoryOnBlog     CategoryOnBlog[]
}

model CategoryOnPorfolio {
  portfolio_id String
  category_id  String
  assignedBy   String

  portfolio Portfolio @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)
  category  Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([portfolio_id, category_id])
}

model CategoryOnBlog {
  blog_id     String
  category_id String
  assignedBy  String

  blog     Blog     @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([blog_id, category_id])
}

model Portfolio {
  id                 String               @id @default(uuid())
  admin_id           String?
  site_user_id       String?
  title              String
  description        String
  cover_url          String?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  published_at       DateTime?
  slug               String               @unique
  gallery            String[]
  content            Json?
  admin              Admin?               @relation(fields: [admin_id], references: [id])
  site_user          SiteUser?            @relation(fields: [site_user_id], references: [id])
  CategoryOnPorfolio CategoryOnPorfolio[]
}

model Blog {
  id             String           @id @default(uuid())
  admin_id       String?
  site_user_id   String?
  title          String
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  published_at   DateTime?
  slug           String
  description    String
  content        Json?
  cover_url      String?
  view           Int              @default(0)
  admin          Admin?           @relation(fields: [admin_id], references: [id])
  site_user      SiteUser?        @relation(fields: [site_user_id], references: [id])
  CategoryOnBlog CategoryOnBlog[]
  BlogMetric     BlogMetric[]
}

model FormQuestion {
  id            String         @id @default(uuid())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  published_at  DateTime?
  form_text     String
  type          QuestionType   @default(SINGLE_CHOICE)
  order         Int            @unique
  form_option   FormOption[]
  form_response FormResponse[]
}

model FormOption {
  id            String         @id @default(uuid())
  question_id   String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  option_text   String
  type          QuestionType   @default(SINGLE_CHOICE)
  price         Float[]
  metadata      Json?
  form_question FormQuestion   @relation(fields: [question_id], references: [id], onDelete: Cascade)
  form_response FormResponse[]
}

model FormResponse {
  id            String       @id @default(uuid())
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  question_id   String
  option_id     String
  attempt_id    String
  metadata      Json?
  form_question FormQuestion @relation(fields: [question_id], references: [id])
  form_option   FormOption   @relation(fields: [option_id], references: [id])
  form_attempt  FormAttempt  @relation(fields: [attempt_id], references: [id])
}

model FormAttempt {
  id            String         @id @default(uuid())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  user_id       String
  user          User           @relation(fields: [user_id], references: [id])
  form_response FormResponse[]
}

model ChatRoom {
  id              String          @id @default(uuid())
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  name            String
  is_group        Boolean
  last_message_id String?         @unique
  last_message    ChatMessage?    @relation(fields: [last_message_id], references: [id], name: "LastMessageInChatRoom")
  chat_members    ChatMember[]
  chat_messages   ChatMessage[]
  unread_messages UnreadMessage[]
}

model ChatMember {
  id              String          @id @default(uuid())
  admin_id        String?
  user_id         String?
  chat_room_id    String
  role            ChatMemberRole  @default(MEMBER)
  joined_at       DateTime        @default(now())
  left_at         DateTime?
  admin           Admin?          @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  user            User?           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chat_room       ChatRoom        @relation(fields: [chat_room_id], references: [id])
  chat_messages   ChatMessage[]
  unread_messages UnreadMessage[]
}

model ChatMessage {
  id                String          @id @default(uuid())
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  deleted_at        DateTime?
  chat_member_id    String
  chat_room_id      String
  content           String
  media             String[]
  message_type      ChatMessageType @default(TEXT)
  chat_member       ChatMember      @relation(fields: [chat_member_id], references: [id])
  chat_room         ChatRoom        @relation(fields: [chat_room_id], references: [id])
  chat_room_message ChatRoom?       @relation(name: "LastMessageInChatRoom")
}

model UnreadMessage {
  id             String     @id @default(uuid())
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  chat_room_id   String
  chat_member_id String
  total_count    Int
  chat_member    ChatMember @relation(fields: [chat_member_id], references: [id])
  chat_room      ChatRoom   @relation(fields: [chat_room_id], references: [id])
}

model BlogMetric {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  blog_id    String
  view       BigInt
  blog       Blog     @relation(fields: [blog_id], references: [id])
}

model Test {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum CategoryColor {
  RED
  VIOLET
  GREEN
  PURPLE
  YELLOW
  ORANGE
  GRAY
  TEAL
  INDIGO
  BLUE
}

enum QuestionType {
  MULTI_CHOICE
  SINGLE_CHOICE
}

enum ChatMemberRole {
  ADMIN
  MEMBER
}

enum ChatMessageType {
  TEXT
  IMAGE
  JOIN
  LEAVE
  INVITE
  REMOVE
}
